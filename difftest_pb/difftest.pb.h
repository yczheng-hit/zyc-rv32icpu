// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: difftest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_difftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_difftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_difftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_difftest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_difftest_2eproto;
namespace difftest {
class Difftest;
struct DifftestDefaultTypeInternal;
extern DifftestDefaultTypeInternal _Difftest_default_instance_;
class Difftest_Reigster;
struct Difftest_ReigsterDefaultTypeInternal;
extern Difftest_ReigsterDefaultTypeInternal _Difftest_Reigster_default_instance_;
}  // namespace difftest
PROTOBUF_NAMESPACE_OPEN
template<> ::difftest::Difftest* Arena::CreateMaybeMessage<::difftest::Difftest>(Arena*);
template<> ::difftest::Difftest_Reigster* Arena::CreateMaybeMessage<::difftest::Difftest_Reigster>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace difftest {

enum Difftest_InstType : int {
  Difftest_InstType_WRITE_REG = 0,
  Difftest_InstType_WRITE_MEM = 1,
  Difftest_InstType_CHECK_REG = 2,
  Difftest_InstType_BRANCH = 3
};
bool Difftest_InstType_IsValid(int value);
constexpr Difftest_InstType Difftest_InstType_InstType_MIN = Difftest_InstType_WRITE_REG;
constexpr Difftest_InstType Difftest_InstType_InstType_MAX = Difftest_InstType_BRANCH;
constexpr int Difftest_InstType_InstType_ARRAYSIZE = Difftest_InstType_InstType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Difftest_InstType_descriptor();
template<typename T>
inline const std::string& Difftest_InstType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Difftest_InstType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Difftest_InstType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Difftest_InstType_descriptor(), enum_t_value);
}
inline bool Difftest_InstType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Difftest_InstType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Difftest_InstType>(
    Difftest_InstType_descriptor(), name, value);
}
// ===================================================================

class Difftest_Reigster final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:difftest.Difftest.Reigster) */ {
 public:
  inline Difftest_Reigster() : Difftest_Reigster(nullptr) {}
  ~Difftest_Reigster() override;
  explicit PROTOBUF_CONSTEXPR Difftest_Reigster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Difftest_Reigster(const Difftest_Reigster& from);
  Difftest_Reigster(Difftest_Reigster&& from) noexcept
    : Difftest_Reigster() {
    *this = ::std::move(from);
  }

  inline Difftest_Reigster& operator=(const Difftest_Reigster& from) {
    CopyFrom(from);
    return *this;
  }
  inline Difftest_Reigster& operator=(Difftest_Reigster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Difftest_Reigster& default_instance() {
    return *internal_default_instance();
  }
  static inline const Difftest_Reigster* internal_default_instance() {
    return reinterpret_cast<const Difftest_Reigster*>(
               &_Difftest_Reigster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Difftest_Reigster& a, Difftest_Reigster& b) {
    a.Swap(&b);
  }
  inline void Swap(Difftest_Reigster* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Difftest_Reigster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Difftest_Reigster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Difftest_Reigster>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Difftest_Reigster& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Difftest_Reigster& from) {
    Difftest_Reigster::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Difftest_Reigster* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "difftest.Difftest.Reigster";
  }
  protected:
  explicit Difftest_Reigster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 5,
    kDataFieldNumber = 6,
  };
  // required uint32 id = 5;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // required uint32 data = 6;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  uint32_t data() const;
  void set_data(uint32_t value);
  private:
  uint32_t _internal_data() const;
  void _internal_set_data(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:difftest.Difftest.Reigster)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t id_;
    uint32_t data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_difftest_2eproto;
};
// -------------------------------------------------------------------

class Difftest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:difftest.Difftest) */ {
 public:
  inline Difftest() : Difftest(nullptr) {}
  ~Difftest() override;
  explicit PROTOBUF_CONSTEXPR Difftest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Difftest(const Difftest& from);
  Difftest(Difftest&& from) noexcept
    : Difftest() {
    *this = ::std::move(from);
  }

  inline Difftest& operator=(const Difftest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Difftest& operator=(Difftest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Difftest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Difftest* internal_default_instance() {
    return reinterpret_cast<const Difftest*>(
               &_Difftest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Difftest& a, Difftest& b) {
    a.Swap(&b);
  }
  inline void Swap(Difftest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Difftest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Difftest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Difftest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Difftest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Difftest& from) {
    Difftest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Difftest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "difftest.Difftest";
  }
  protected:
  explicit Difftest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Difftest_Reigster Reigster;

  typedef Difftest_InstType InstType;
  static constexpr InstType WRITE_REG =
    Difftest_InstType_WRITE_REG;
  static constexpr InstType WRITE_MEM =
    Difftest_InstType_WRITE_MEM;
  static constexpr InstType CHECK_REG =
    Difftest_InstType_CHECK_REG;
  static constexpr InstType BRANCH =
    Difftest_InstType_BRANCH;
  static inline bool InstType_IsValid(int value) {
    return Difftest_InstType_IsValid(value);
  }
  static constexpr InstType InstType_MIN =
    Difftest_InstType_InstType_MIN;
  static constexpr InstType InstType_MAX =
    Difftest_InstType_InstType_MAX;
  static constexpr int InstType_ARRAYSIZE =
    Difftest_InstType_InstType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InstType_descriptor() {
    return Difftest_InstType_descriptor();
  }
  template<typename T>
  static inline const std::string& InstType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InstType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InstType_Name.");
    return Difftest_InstType_Name(enum_t_value);
  }
  static inline bool InstType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      InstType* value) {
    return Difftest_InstType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRegsFieldNumber = 7,
    kPcFieldNumber = 1,
    kTypeFieldNumber = 3,
    kDestRegFieldNumber = 4,
    kDestAddrFieldNumber = 8,
    kDestDataFieldNumber = 9,
  };
  // repeated .difftest.Difftest.Reigster regs = 7;
  int regs_size() const;
  private:
  int _internal_regs_size() const;
  public:
  void clear_regs();
  ::difftest::Difftest_Reigster* mutable_regs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::difftest::Difftest_Reigster >*
      mutable_regs();
  private:
  const ::difftest::Difftest_Reigster& _internal_regs(int index) const;
  ::difftest::Difftest_Reigster* _internal_add_regs();
  public:
  const ::difftest::Difftest_Reigster& regs(int index) const;
  ::difftest::Difftest_Reigster* add_regs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::difftest::Difftest_Reigster >&
      regs() const;

  // required uint32 pc = 1;
  bool has_pc() const;
  private:
  bool _internal_has_pc() const;
  public:
  void clear_pc();
  uint32_t pc() const;
  void set_pc(uint32_t value);
  private:
  uint32_t _internal_pc() const;
  void _internal_set_pc(uint32_t value);
  public:

  // required .difftest.Difftest.InstType type = 3 [default = WRITE_REG];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::difftest::Difftest_InstType type() const;
  void set_type(::difftest::Difftest_InstType value);
  private:
  ::difftest::Difftest_InstType _internal_type() const;
  void _internal_set_type(::difftest::Difftest_InstType value);
  public:

  // optional uint32 dest_reg = 4;
  bool has_dest_reg() const;
  private:
  bool _internal_has_dest_reg() const;
  public:
  void clear_dest_reg();
  uint32_t dest_reg() const;
  void set_dest_reg(uint32_t value);
  private:
  uint32_t _internal_dest_reg() const;
  void _internal_set_dest_reg(uint32_t value);
  public:

  // optional uint32 dest_addr = 8;
  bool has_dest_addr() const;
  private:
  bool _internal_has_dest_addr() const;
  public:
  void clear_dest_addr();
  uint32_t dest_addr() const;
  void set_dest_addr(uint32_t value);
  private:
  uint32_t _internal_dest_addr() const;
  void _internal_set_dest_addr(uint32_t value);
  public:

  // optional uint32 dest_data = 9;
  bool has_dest_data() const;
  private:
  bool _internal_has_dest_data() const;
  public:
  void clear_dest_data();
  uint32_t dest_data() const;
  void set_dest_data(uint32_t value);
  private:
  uint32_t _internal_dest_data() const;
  void _internal_set_dest_data(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:difftest.Difftest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::difftest::Difftest_Reigster > regs_;
    uint32_t pc_;
    int type_;
    uint32_t dest_reg_;
    uint32_t dest_addr_;
    uint32_t dest_data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_difftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Difftest_Reigster

// required uint32 id = 5;
inline bool Difftest_Reigster::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Difftest_Reigster::has_id() const {
  return _internal_has_id();
}
inline void Difftest_Reigster::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Difftest_Reigster::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Difftest_Reigster::id() const {
  // @@protoc_insertion_point(field_get:difftest.Difftest.Reigster.id)
  return _internal_id();
}
inline void Difftest_Reigster::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void Difftest_Reigster::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:difftest.Difftest.Reigster.id)
}

// required uint32 data = 6;
inline bool Difftest_Reigster::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Difftest_Reigster::has_data() const {
  return _internal_has_data();
}
inline void Difftest_Reigster::clear_data() {
  _impl_.data_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Difftest_Reigster::_internal_data() const {
  return _impl_.data_;
}
inline uint32_t Difftest_Reigster::data() const {
  // @@protoc_insertion_point(field_get:difftest.Difftest.Reigster.data)
  return _internal_data();
}
inline void Difftest_Reigster::_internal_set_data(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_ = value;
}
inline void Difftest_Reigster::set_data(uint32_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:difftest.Difftest.Reigster.data)
}

// -------------------------------------------------------------------

// Difftest

// required uint32 pc = 1;
inline bool Difftest::_internal_has_pc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Difftest::has_pc() const {
  return _internal_has_pc();
}
inline void Difftest::clear_pc() {
  _impl_.pc_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Difftest::_internal_pc() const {
  return _impl_.pc_;
}
inline uint32_t Difftest::pc() const {
  // @@protoc_insertion_point(field_get:difftest.Difftest.pc)
  return _internal_pc();
}
inline void Difftest::_internal_set_pc(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pc_ = value;
}
inline void Difftest::set_pc(uint32_t value) {
  _internal_set_pc(value);
  // @@protoc_insertion_point(field_set:difftest.Difftest.pc)
}

// required .difftest.Difftest.InstType type = 3 [default = WRITE_REG];
inline bool Difftest::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Difftest::has_type() const {
  return _internal_has_type();
}
inline void Difftest::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::difftest::Difftest_InstType Difftest::_internal_type() const {
  return static_cast< ::difftest::Difftest_InstType >(_impl_.type_);
}
inline ::difftest::Difftest_InstType Difftest::type() const {
  // @@protoc_insertion_point(field_get:difftest.Difftest.type)
  return _internal_type();
}
inline void Difftest::_internal_set_type(::difftest::Difftest_InstType value) {
  assert(::difftest::Difftest_InstType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void Difftest::set_type(::difftest::Difftest_InstType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:difftest.Difftest.type)
}

// optional uint32 dest_reg = 4;
inline bool Difftest::_internal_has_dest_reg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Difftest::has_dest_reg() const {
  return _internal_has_dest_reg();
}
inline void Difftest::clear_dest_reg() {
  _impl_.dest_reg_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Difftest::_internal_dest_reg() const {
  return _impl_.dest_reg_;
}
inline uint32_t Difftest::dest_reg() const {
  // @@protoc_insertion_point(field_get:difftest.Difftest.dest_reg)
  return _internal_dest_reg();
}
inline void Difftest::_internal_set_dest_reg(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dest_reg_ = value;
}
inline void Difftest::set_dest_reg(uint32_t value) {
  _internal_set_dest_reg(value);
  // @@protoc_insertion_point(field_set:difftest.Difftest.dest_reg)
}

// repeated .difftest.Difftest.Reigster regs = 7;
inline int Difftest::_internal_regs_size() const {
  return _impl_.regs_.size();
}
inline int Difftest::regs_size() const {
  return _internal_regs_size();
}
inline void Difftest::clear_regs() {
  _impl_.regs_.Clear();
}
inline ::difftest::Difftest_Reigster* Difftest::mutable_regs(int index) {
  // @@protoc_insertion_point(field_mutable:difftest.Difftest.regs)
  return _impl_.regs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::difftest::Difftest_Reigster >*
Difftest::mutable_regs() {
  // @@protoc_insertion_point(field_mutable_list:difftest.Difftest.regs)
  return &_impl_.regs_;
}
inline const ::difftest::Difftest_Reigster& Difftest::_internal_regs(int index) const {
  return _impl_.regs_.Get(index);
}
inline const ::difftest::Difftest_Reigster& Difftest::regs(int index) const {
  // @@protoc_insertion_point(field_get:difftest.Difftest.regs)
  return _internal_regs(index);
}
inline ::difftest::Difftest_Reigster* Difftest::_internal_add_regs() {
  return _impl_.regs_.Add();
}
inline ::difftest::Difftest_Reigster* Difftest::add_regs() {
  ::difftest::Difftest_Reigster* _add = _internal_add_regs();
  // @@protoc_insertion_point(field_add:difftest.Difftest.regs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::difftest::Difftest_Reigster >&
Difftest::regs() const {
  // @@protoc_insertion_point(field_list:difftest.Difftest.regs)
  return _impl_.regs_;
}

// optional uint32 dest_addr = 8;
inline bool Difftest::_internal_has_dest_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Difftest::has_dest_addr() const {
  return _internal_has_dest_addr();
}
inline void Difftest::clear_dest_addr() {
  _impl_.dest_addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Difftest::_internal_dest_addr() const {
  return _impl_.dest_addr_;
}
inline uint32_t Difftest::dest_addr() const {
  // @@protoc_insertion_point(field_get:difftest.Difftest.dest_addr)
  return _internal_dest_addr();
}
inline void Difftest::_internal_set_dest_addr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dest_addr_ = value;
}
inline void Difftest::set_dest_addr(uint32_t value) {
  _internal_set_dest_addr(value);
  // @@protoc_insertion_point(field_set:difftest.Difftest.dest_addr)
}

// optional uint32 dest_data = 9;
inline bool Difftest::_internal_has_dest_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Difftest::has_dest_data() const {
  return _internal_has_dest_data();
}
inline void Difftest::clear_dest_data() {
  _impl_.dest_data_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t Difftest::_internal_dest_data() const {
  return _impl_.dest_data_;
}
inline uint32_t Difftest::dest_data() const {
  // @@protoc_insertion_point(field_get:difftest.Difftest.dest_data)
  return _internal_dest_data();
}
inline void Difftest::_internal_set_dest_data(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.dest_data_ = value;
}
inline void Difftest::set_dest_data(uint32_t value) {
  _internal_set_dest_data(value);
  // @@protoc_insertion_point(field_set:difftest.Difftest.dest_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace difftest

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::difftest::Difftest_InstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::difftest::Difftest_InstType>() {
  return ::difftest::Difftest_InstType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_difftest_2eproto
