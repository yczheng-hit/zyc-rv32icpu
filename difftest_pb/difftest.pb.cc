// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: difftest.proto

#include "difftest.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace difftest {
PROTOBUF_CONSTEXPR Difftest_Reigster::Difftest_Reigster(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.data_)*/0u} {}
struct Difftest_ReigsterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Difftest_ReigsterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Difftest_ReigsterDefaultTypeInternal() {}
  union {
    Difftest_Reigster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Difftest_ReigsterDefaultTypeInternal _Difftest_Reigster_default_instance_;
PROTOBUF_CONSTEXPR Difftest::Difftest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.regs_)*/{}
  , /*decltype(_impl_.pc_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.dest_reg_)*/0u
  , /*decltype(_impl_.dest_addr_)*/0u
  , /*decltype(_impl_.dest_data_)*/0u} {}
struct DifftestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DifftestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DifftestDefaultTypeInternal() {}
  union {
    Difftest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DifftestDefaultTypeInternal _Difftest_default_instance_;
}  // namespace difftest
static ::_pb::Metadata file_level_metadata_difftest_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_difftest_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_difftest_2eproto = nullptr;

const uint32_t TableStruct_difftest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::difftest::Difftest_Reigster, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::difftest::Difftest_Reigster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::difftest::Difftest_Reigster, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::difftest::Difftest_Reigster, _impl_.data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::difftest::Difftest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::difftest::Difftest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::difftest::Difftest, _impl_.pc_),
  PROTOBUF_FIELD_OFFSET(::difftest::Difftest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::difftest::Difftest, _impl_.dest_reg_),
  PROTOBUF_FIELD_OFFSET(::difftest::Difftest, _impl_.regs_),
  PROTOBUF_FIELD_OFFSET(::difftest::Difftest, _impl_.dest_addr_),
  PROTOBUF_FIELD_OFFSET(::difftest::Difftest, _impl_.dest_data_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::difftest::Difftest_Reigster)},
  { 10, 22, -1, sizeof(::difftest::Difftest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::difftest::_Difftest_Reigster_default_instance_._instance,
  &::difftest::_Difftest_default_instance_._instance,
};

const char descriptor_table_protodef_difftest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016difftest.proto\022\010difftest\"\232\002\n\010Difftest\022"
  "\n\n\002pc\030\001 \002(\r\0224\n\004type\030\003 \002(\0162\033.difftest.Dif"
  "ftest.InstType:\tWRITE_REG\022\020\n\010dest_reg\030\004 "
  "\001(\r\022)\n\004regs\030\007 \003(\0132\033.difftest.Difftest.Re"
  "igster\022\021\n\tdest_addr\030\010 \001(\r\022\021\n\tdest_data\030\t"
  " \001(\r\032$\n\010Reigster\022\n\n\002id\030\005 \002(\r\022\014\n\004data\030\006 \002"
  "(\r\"C\n\010InstType\022\r\n\tWRITE_REG\020\000\022\r\n\tWRITE_M"
  "EM\020\001\022\r\n\tCHECK_REG\020\002\022\n\n\006BRANCH\020\003"
  ;
static ::_pbi::once_flag descriptor_table_difftest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_difftest_2eproto = {
    false, false, 311, descriptor_table_protodef_difftest_2eproto,
    "difftest.proto",
    &descriptor_table_difftest_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_difftest_2eproto::offsets,
    file_level_metadata_difftest_2eproto, file_level_enum_descriptors_difftest_2eproto,
    file_level_service_descriptors_difftest_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_difftest_2eproto_getter() {
  return &descriptor_table_difftest_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_difftest_2eproto(&descriptor_table_difftest_2eproto);
namespace difftest {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Difftest_InstType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_difftest_2eproto);
  return file_level_enum_descriptors_difftest_2eproto[0];
}
bool Difftest_InstType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Difftest_InstType Difftest::WRITE_REG;
constexpr Difftest_InstType Difftest::WRITE_MEM;
constexpr Difftest_InstType Difftest::CHECK_REG;
constexpr Difftest_InstType Difftest::BRANCH;
constexpr Difftest_InstType Difftest::InstType_MIN;
constexpr Difftest_InstType Difftest::InstType_MAX;
constexpr int Difftest::InstType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Difftest_Reigster::_Internal {
 public:
  using HasBits = decltype(std::declval<Difftest_Reigster>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Difftest_Reigster::Difftest_Reigster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:difftest.Difftest.Reigster)
}
Difftest_Reigster::Difftest_Reigster(const Difftest_Reigster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Difftest_Reigster* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.data_));
  // @@protoc_insertion_point(copy_constructor:difftest.Difftest.Reigster)
}

inline void Difftest_Reigster::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.data_){0u}
  };
}

Difftest_Reigster::~Difftest_Reigster() {
  // @@protoc_insertion_point(destructor:difftest.Difftest.Reigster)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Difftest_Reigster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Difftest_Reigster::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Difftest_Reigster::Clear() {
// @@protoc_insertion_point(message_clear_start:difftest.Difftest.Reigster)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.data_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.data_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Difftest_Reigster::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_data(&has_bits);
          _impl_.data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Difftest_Reigster::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:difftest.Difftest.Reigster)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 id = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  // required uint32 data = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:difftest.Difftest.Reigster)
  return target;
}

size_t Difftest_Reigster::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:difftest.Difftest.Reigster)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required uint32 id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  if (_internal_has_data()) {
    // required uint32 data = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data());
  }

  return total_size;
}
size_t Difftest_Reigster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:difftest.Difftest.Reigster)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 id = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());

    // required uint32 data = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Difftest_Reigster::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Difftest_Reigster::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Difftest_Reigster::GetClassData() const { return &_class_data_; }


void Difftest_Reigster::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Difftest_Reigster*>(&to_msg);
  auto& from = static_cast<const Difftest_Reigster&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:difftest.Difftest.Reigster)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_ = from._impl_.data_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Difftest_Reigster::CopyFrom(const Difftest_Reigster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:difftest.Difftest.Reigster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Difftest_Reigster::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Difftest_Reigster::InternalSwap(Difftest_Reigster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Difftest_Reigster, _impl_.data_)
      + sizeof(Difftest_Reigster::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(Difftest_Reigster, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Difftest_Reigster::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_difftest_2eproto_getter, &descriptor_table_difftest_2eproto_once,
      file_level_metadata_difftest_2eproto[0]);
}

// ===================================================================

class Difftest::_Internal {
 public:
  using HasBits = decltype(std::declval<Difftest>()._impl_._has_bits_);
  static void set_has_pc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dest_reg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dest_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dest_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Difftest::Difftest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:difftest.Difftest)
}
Difftest::Difftest(const Difftest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Difftest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.regs_){from._impl_.regs_}
    , decltype(_impl_.pc_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.dest_reg_){}
    , decltype(_impl_.dest_addr_){}
    , decltype(_impl_.dest_data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pc_, &from._impl_.pc_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dest_data_) -
    reinterpret_cast<char*>(&_impl_.pc_)) + sizeof(_impl_.dest_data_));
  // @@protoc_insertion_point(copy_constructor:difftest.Difftest)
}

inline void Difftest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.regs_){arena}
    , decltype(_impl_.pc_){0u}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.dest_reg_){0u}
    , decltype(_impl_.dest_addr_){0u}
    , decltype(_impl_.dest_data_){0u}
  };
}

Difftest::~Difftest() {
  // @@protoc_insertion_point(destructor:difftest.Difftest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Difftest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.regs_.~RepeatedPtrField();
}

void Difftest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Difftest::Clear() {
// @@protoc_insertion_point(message_clear_start:difftest.Difftest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.regs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.pc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dest_data_) -
        reinterpret_cast<char*>(&_impl_.pc_)) + sizeof(_impl_.dest_data_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Difftest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 pc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pc(&has_bits);
          _impl_.pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .difftest.Difftest.InstType type = 3 [default = WRITE_REG];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::difftest::Difftest_InstType_IsValid(val))) {
            _internal_set_type(static_cast<::difftest::Difftest_InstType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dest_reg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_dest_reg(&has_bits);
          _impl_.dest_reg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .difftest.Difftest.Reigster regs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_regs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dest_addr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_dest_addr(&has_bits);
          _impl_.dest_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dest_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_dest_data(&has_bits);
          _impl_.dest_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Difftest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:difftest.Difftest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 pc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pc(), target);
  }

  // required .difftest.Difftest.InstType type = 3 [default = WRITE_REG];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional uint32 dest_reg = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dest_reg(), target);
  }

  // repeated .difftest.Difftest.Reigster regs = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_regs_size()); i < n; i++) {
    const auto& repfield = this->_internal_regs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 dest_addr = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_dest_addr(), target);
  }

  // optional uint32 dest_data = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_dest_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:difftest.Difftest)
  return target;
}

size_t Difftest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:difftest.Difftest)
  size_t total_size = 0;

  if (_internal_has_pc()) {
    // required uint32 pc = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pc());
  }

  if (_internal_has_type()) {
    // required .difftest.Difftest.InstType type = 3 [default = WRITE_REG];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t Difftest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:difftest.Difftest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 pc = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pc());

    // required .difftest.Difftest.InstType type = 3 [default = WRITE_REG];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .difftest.Difftest.Reigster regs = 7;
  total_size += 1UL * this->_internal_regs_size();
  for (const auto& msg : this->_impl_.regs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional uint32 dest_reg = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dest_reg());
    }

    // optional uint32 dest_addr = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dest_addr());
    }

    // optional uint32 dest_data = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dest_data());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Difftest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Difftest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Difftest::GetClassData() const { return &_class_data_; }


void Difftest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Difftest*>(&to_msg);
  auto& from = static_cast<const Difftest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:difftest.Difftest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.regs_.MergeFrom(from._impl_.regs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pc_ = from._impl_.pc_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dest_reg_ = from._impl_.dest_reg_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dest_addr_ = from._impl_.dest_addr_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dest_data_ = from._impl_.dest_data_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Difftest::CopyFrom(const Difftest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:difftest.Difftest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Difftest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.regs_))
    return false;
  return true;
}

void Difftest::InternalSwap(Difftest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.regs_.InternalSwap(&other->_impl_.regs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Difftest, _impl_.dest_data_)
      + sizeof(Difftest::_impl_.dest_data_)
      - PROTOBUF_FIELD_OFFSET(Difftest, _impl_.pc_)>(
          reinterpret_cast<char*>(&_impl_.pc_),
          reinterpret_cast<char*>(&other->_impl_.pc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Difftest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_difftest_2eproto_getter, &descriptor_table_difftest_2eproto_once,
      file_level_metadata_difftest_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace difftest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::difftest::Difftest_Reigster*
Arena::CreateMaybeMessage< ::difftest::Difftest_Reigster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::difftest::Difftest_Reigster >(arena);
}
template<> PROTOBUF_NOINLINE ::difftest::Difftest*
Arena::CreateMaybeMessage< ::difftest::Difftest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::difftest::Difftest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
